#ifndef EVENTS_HPP
#define EVENTS_HPP

#include "AbstractEvent.hpp"
#include "ConnectionEx.hpp"
#include "TypeTraits.hpp"

@@for(int i=0; i<8; i+=1)
@classArgs("template<", i, "> ")@class EventRef@i@;

@classArgs("template<", i, "> ")@class Event@i@ : public AbstractEvent
{
public:
	typedef Connection@i;selArgs("<", i, ">")@ ConnectionType;

	Event@i@() {}
	~Event@i@() {}

	void addConnection(ConnectionList * tracker, ConnectionType * conn)
	{
		AbstractEvent::addConnection(tracker, conn);
	}
	
	void fire(@funcArgs(i)@) const
	{
		ConnectionsVector const & conns = connections();
		for(ConnectionsVector::const_iterator it = conns.begin(); it != conns.end(); ++it)
		{
			static_cast<ConnectionType const *>(*it)->invoke(@callArgs(i)@);
		}
	}

	inline EventRef@i@@selArgs("<", i, ">")@ bind(AbstractObjectRef sender);
};

@classArgs("template<", i, "> ")@class EventRef@i@ : public AbstractEventRef
{
public:
	typedef Event@i;selArgs("<", i, ">")@ EventType;
	typedef @if(i > 0) "typename " end@EventType::ConnectionType ConnectionType;

	EventRef@i@(AbstractObjectRef sender, EventType * ev) : AbstractEventRef(sender, ev) {}
	
	EventType * senderEvent() const
	{
		return static_cast<EventType*>(AbstractEventRef::senderEvent());
	}

	EventRef@i;selArgs("<", i, ">")@ rebind(AbstractObjectRef newSender) const
	{
		return EventRef@i;selArgs("<", i, ">")@(newSender, static_cast<EventType*>(senderEvent()) );
	}

	template<class T, class Y> void connect(ConnectionList * tracker, T * obj, void (Y::*pmf)(@funcArgs(i)@))
	{
		ConnectionType * conn = new ConnectionType(
			senderObject(), senderEvent(), obj,
			fastdelegate::MakeDelegate(obj, pmf)
		);
		addConnection(tracker, conn);
	}

	template<class T, class Y> void connect(ConnectionList * tracker, T const * obj, void (Y::*pmf)(@funcArgs(i)@) const)
	{
		ConnectionType * conn = new ConnectionType(
			senderObject(), senderEvent(), obj,
			fastdelegate::MakeDelegate(obj, pmf)
		);
		addConnection(tracker, conn);
	}

	template<class T, class Y> void connect(ConnectionList * tracker, T * obj, Y pmf)
	{
		detail::ArgList0 stored;
		connectEx(tracker, obj, fastdelegate::MakeDelegate(obj, pmf), stored);
	}

@@for(int j=1; j<8; j+=1)
	template<class T, class Y, @list("class T%", 1, j)@> void connect(ConnectionList * tracker, T * obj, Y pmf, @list("T% x%", 1, j)@)
	{
@@for(int k=1; k<=j; k+=1)
		typedef typename StorageType<T@k@>::Type S@k@;
@@next
		detail::ArgList@j@<@list("S%", 1, j)@> stored(@list("x%", 1, j)@);
		connectEx(tracker, obj, fastdelegate::MakeDelegate(obj, pmf), stored);
	}

@@next
private:
	void addConnection(ConnectionList * tracker, ConnectionType * conn)
	{
		senderEvent()->addConnection(tracker, conn);
	}

	template<class DelegateClass, class StoredListClass> void connectEx(ConnectionList * tracker, AbstractObjectRef obj, DelegateClass const & deleg, StoredListClass const & stored)
	{
		ConnectionType * conn = new ConnectionEx@i@<@selArgs(i, ", ")@DelegateClass, StoredListClass>(
			senderObject(), senderEvent(), obj, deleg, stored
		);
		addConnection(tracker, conn);
	}
};

@classArgs("template<", i, "> ")@inline EventRef@i;selArgs("<", i, ">")@ Event@i;selArgs("<", i, ">")@::bind(AbstractObjectRef sender)
{
	return EventRef@i;selArgs("<", i, ">")@(sender, this);
}

@@next
#endif //EVENTS_H