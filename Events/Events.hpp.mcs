#ifndef EVENTS_HPP
#define EVENTS_HPP

#include "AbstractEvent.hpp"
#include "ConnectionEx.hpp"
#include "TypeTraits.hpp"

@@for(int i=0; i<8; i+=1)
@classArgs("template<", i, "> ")@class Event@i@ : public AbstractEvent
{
public:
	typedef fastdelegate::FastDelegate@i@<@iter("Param%, ", i)@void> DelegateType;

	Event@i@() {}
	~Event@i@() {}

	void addConnection(ConnectionList * tracker, DelegateType const & deleg, ExtraDelegateData * data)
	{
		AbstractEvent::addConnection(tracker, deleg, data);
	}
	
	void fire(@funcArgs(i)@) const
	{
		FireLock lock(this);
		ConnectionsVector const & conns = lock.connections();
		for(ConnectionsVector::const_iterator it = conns.begin(); it != conns.end(); ++it)
		{
			DelegateType deleg = it->delegate_.castToDelegate<DelegateType>();
			deleg(@callArgs(i)@);
		}
	}
};

@classArgs("template<", i, "> ")@class EventRef@i@ : public AbstractEventRef
{
public:
	typedef Event@i;selArgs("<", i, ">")@ EventType;
	typedef @if(i > 0) "typename " end@EventType::DelegateType DelegateType;

	EventRef@i@(EventType * ev) : AbstractEventRef(ev) {}
	
	EventType * senderEvent() const
	{
		return static_cast<EventType*>(AbstractEventRef::senderEvent());
	}

	template<class T, class Y> void connect(ConnectionList * tracker, T * obj, void (Y::*pmf)(@funcArgs(i)@))
	{
		addConnection(tracker, fastdelegate::MakeDelegate(obj, pmf), 0);
	}

	template<class T, class Y> void connect(ConnectionList * tracker, T const * obj, void (Y::*pmf)(@funcArgs(i)@) const)
	{
		addConnection(tracker, fastdelegate::MakeDelegate(obj, pmf), 0);
	}

	template<class T, class Y> void connect(ConnectionList * tracker, T * obj, Y pmf)
	{
		detail::ArgList0 stored;
		connectEx(tracker, fastdelegate::MakeDelegate(obj, pmf), stored);
	}

@@for(int j=1; j<8; j+=1)
	template<class T, class Y, @list("class T%", 1, j)@> void connect(ConnectionList * tracker, T * obj, Y pmf, @list("T% x%", 1, j)@)
	{
@@for(int k=1; k<=j; k+=1)
		typedef typename StorageType<T@k@>::Type S@k@;
@@next
		detail::ArgList@j@<@list("S%", 1, j)@> stored(@list("x%", 1, j)@);
		connectEx(tracker, fastdelegate::MakeDelegate(obj, pmf), stored);
	}

@@next
private:
	void addConnection(ConnectionList * tracker, DelegateType const & deleg, ExtraDelegateData * data)
	{
		senderEvent()->addConnection(tracker, deleg, data);
	}

	template<class DelegateClass, class StoredListClass> void connectEx(ConnectionList * tracker, DelegateClass const & deleg, StoredListClass const & stored)
	{
		typedef ExtraDelegateData@i@<@selArgs(i, ", ")@DelegateClass, StoredListClass> ExtraDelegateDataType;
		ExtraDelegateDataType * data = new ExtraDelegateDataType(deleg, stored);
		addConnection(tracker, fastdelegate::MakeDelegate(data, &ExtraDelegateDataType::invokeHelper), data);
	}
};

@@next
#endif //EVENTS_H