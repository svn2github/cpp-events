// Copyright (c) 2010 Nickolas Pohilets
//
// This file is a part of the CppEvents library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@@int N=8;
#ifndef __CPP_EVENTS__CONNECTION_HPP
#define __CPP_EVENTS__CONNECTION_HPP

#include "AbstractConnection.hpp"

namespace Cpp {
namespace Private {
namespace Events {
//------------------------------------------------------------------------------
@@for(int i=0; i<=N; i+=1)
@listx("template<%> ", "class Param%", i)@class Connection@i@ : public AbstractConnection
{
protected:
	virtual ~Connection@i@() {}
public:
	typedef fastdelegate::FastDelegate@i@<@iter("Param%, ", i)@void> DelegateType;
	
	Connection@i@(DelegateType const & deleg)
		: AbstractConnection(AbstractDelegate(deleg))
		, delegate_(deleg)
	{}

	void invoke(@list("Param% p%", i)@) const { delegate_(@list("p%",i)@); }
protected:
	DelegateType delegate_;

	Connection@i@(AbstractDelegate const & memento)
		: AbstractConnection(memento)
		, delegate_()
	{}
};
//------------------------------------------------------------------------------
@@next
} //namespace Events
} //namespace Private
} //namespace Cpp

#endif //__CPP_EVENTS__CONNECTION_HPP