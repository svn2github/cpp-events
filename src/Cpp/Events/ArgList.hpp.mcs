@@int N=8;
#ifndef __CPP_EVENTS__ARG_LIST_HPP
#define __CPP_EVENTS__ARG_LIST_HPP

#include "../../FastDelegate/FastDelegate.h"

namespace Cpp {
namespace Private {
namespace Events {
//------------------------------------------------------------------------------
template<int N> struct Num { enum { value = N }; };
//------------------------------------------------------------------------------
template<int N, class T> struct GetType;
@@for(int i=0; i<N; i+=1)
template<class T> struct GetType<@i@, T> { typedef typename T::Type@i@ Type; };
@@next
//------------------------------------------------------------------------------
class ArgList0
{
public:
    enum { size = 0 };
    ArgList0() {}
};
//------------------------------------------------------------------------------
@@for(int i=1; i<=N; i+=1)
@@listx("template<%>", "class T%", i)
@*
    if(i % 2 == 0)
        "abc"
    elif(i % 3 == 0)
        "def"
    elif(i % 5 == 0)
        "ghi"
    else
        "xxx"
    end
*@
class ArgList@i@ : public ArgList@(i-1);listx("<%>", "T%", i-1)@
{
public:
    enum { size = @i@ };
    typedef T@(i-1)@ Type@(i-1)@;

    T@(i-1)@ x@(i-1)@;

    ArgList@i@(@list("T% a%", i)@)
        : ArgList@(i-1);listx("<%>", "T%", i-1)@(@list("a%", i-1)@), x@(i-1)@(a@(i-1)@)
    {}
    
    T@(i-1)@ get(Num<@(i-1)@>) const { return x@(i-1)@; }
};
//------------------------------------------------------------------------------
@@next
template<class StoredList, class ParamList, int N, bool UseStored> struct GetArgHelper;

template<class StoredList, class ParamList, int N> struct GetArgHelper<StoredList, ParamList, N, true>
{
   enum { index = N };
   typedef StoredList ListType;
   typedef typename GetType<index, ListType>::Type Type;

   static Type get(StoredList const & list, ParamList const & ) { return list.get(Num<N>()); }
};

template<class StoredList, class ParamList, int N> struct GetArgHelper<StoredList, ParamList, N, false>
{
   enum { index = N - StoredList::size };
   typedef ParamList ListType;
   typedef typename GetType<index, ListType>::Type Type;

   static Type get(StoredList const &, ParamList const & list) { return list.get(Num<index>()); }
};
//------------------------------------------------------------------------------
template<class StoredList, class ParamList, int N> struct GetArg
{
   enum { useStored = (N < StoredList::size) };
   typedef GetArgHelper<StoredList, ParamList, N, useStored > HelperType;

   static typename HelperType::Type get(StoredList const & s, ParamList const & p)
   {
       return HelperType::get(s, p);
   }
};
//------------------------------------------------------------------------------
@@for(int i=0; i<=N; i+=1)
template<class R@listx(", %", "class T%", i)@, class StoredList, class ParamList>
    R invokeDelegate(fastdelegate::FastDelegate@i@<@listx("%, ", "T%", i)@R> const & deleg, StoredList const & s, ParamList const & p)
{
    return deleg(@listx("%\n    ", "\n        GetArg<StoredList, ParamList, %>::get(s, p)", i, ",")@);
}
//------------------------------------------------------------------------------
@@next
} //namespace Events
} //namespace Private
} //namespace Cpp

#endif //__CPP_EVENTS__ARG_LIST_HPP
