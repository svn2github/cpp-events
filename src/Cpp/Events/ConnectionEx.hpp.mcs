@@int N=8;
#ifndef __CPP_EVENTS__CONNECTION_EX__HPP
#define __CPP_EVENTS__CONNECTION_EX__HPP

#include "Connection.hpp"
#include "ArgList.hpp"

namespace Cpp {
namespace Private {
namespace Events {
//------------------------------------------------------------------------------
@@for(int i=0; i<=N; i+=1)
template<@classArgs(i, ", ")@class DelegateClass, class StoredListClass>
class ConnectionEx@i@ : public Connection@i;selArgs("<",i,">")@
{
public:
	typedef Connection@i;selArgs("<",i,">")@ BaseType;
	typedef ConnectionEx@i@<@selArgs(i,",")@DelegateClass, StoredListClass> ThisType;

	ConnectionEx@i@(DelegateClass const & deleg, StoredListClass const & stored)
		: BaseType(AbstractDelegate(deleg))
		, deleg_(deleg), stored_(stored)
	{
		BaseType::delegate_ = fastdelegate::MakeDelegate(this, &ThisType::invokeHelper);
	}
private:
	DelegateClass deleg_;
	StoredListClass stored_;

	void invokeHelper(@funcArgs(i)@) const
	{
		ArgList@i;selArgs("<", i, ">")@ paramList@callArgs("(", i, ")")@;
		return invokeDelegate(deleg_, stored_, paramList);
	}
};
//------------------------------------------------------------------------------
@@next
} //namespace Events
} //namespace Private
} //namespace Cpp

#endif //__CPP_EVENTS__CONNECTION_EX__HPP