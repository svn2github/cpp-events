// Copyright (c) 2010 Nickolas Pohilets
//
// This file is a part of the CppEvents library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@@int N=8;
#ifndef __CPP__EVENTS__CONNECTION_EX__HPP
#define __CPP__EVENTS__CONNECTION_EX__HPP

#include <Cpp/Events/Connection.hpp>
#include <Cpp/Events/ArgList.hpp>

namespace Cpp {
namespace Private {
namespace Events {
//------------------------------------------------------------------------------
@@for(int i=0; i<=N; i+=1)
template<@classArgs(i, ", ")@class DelegateClass, class StoredListClass>
class ConnectionEx@i@ : public Connection@i;selArgs("<",i,">")@
{
public:
	typedef Connection@i;selArgs("<",i,">")@ BaseType;
	typedef ConnectionEx@i@<@selArgs(i,",")@DelegateClass, StoredListClass> ThisType;

	ConnectionEx@i@(DelegateClass const & deleg, StoredListClass const & stored)
		: BaseType(AbstractDelegate(deleg))
		, deleg_(deleg), stored_(stored)
	{
		BaseType::delegate_ = fastdelegate::MakeDelegate(this, &ThisType::invokeHelper);
	}
private:
	DelegateClass deleg_;
	StoredListClass stored_;

	void invokeHelper(@funcArgs(i)@) const
	{
		ArgList@i;selArgs("<", i, ">")@ paramList@callArgs("(", i, ")")@;
		return invokeDelegate(deleg_, stored_, paramList);
	}
};
//------------------------------------------------------------------------------
@@next
} //namespace Events
} //namespace Private
} //namespace Cpp

#endif //__CPP__EVENTS__CONNECTION_EX__HPP